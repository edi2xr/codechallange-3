### SIMPLE BLOG!


# Blog Post Manager
A simple blog post manager built with HTML, CSS, and JavaScript that uses a local API to view, add, update, and delete blog posts.

 # Learning Goals
Access data from an API using GET requests and display it on the page (DOM).

Listen for user interactions like clicks and form submissions to update the UI.

(Advanced) Send data to an API using POST, PATCH, and DELETE requests.

 # Features
✅ View all blog post titles.

✅ Click a post title to see its full details.

✅ Add a new blog post using a form.

✅ (Advanced) Edit and update a blog post.

✅ (Advanced) Delete a blog post.

✅ (Advanced) Persist changes using API requests.

# Setup Instructions
1. Clone or Download This Project
bash
Copy
Edit
git clone https://github.com/your-username/blog-post-manager.git
cd blog-post-manager
2. Install JSON Server (only once)
bash
Copy
Edit
npm install -g json-server@0.17.4
3. Start the Backend Server
Make sure your db.json is in the root folder. Then run:

bash
Copy
Edit
json-server --watch db.json
This will run a fake API server at:

bash
Copy
Edit
http://localhost:3000/posts
4. Start the Frontend
You can use live-server or open index.html in your browser.

# To install live-server globally:

bash
Copy
Edit
npm install -g live-server
Then run:

bash
Copy
Edit
live-server

#  Project Structure
pgsql
Copy
Edit
project-folder/
├── index.html
├── css/
│   └── styles.css
├── src/
│   └── index.js
└── db.json

# API Endpoints Used
Method	Endpoint	Description
GET	/posts	Get all blog posts
GET	/posts/:id	Get a single post
POST	/posts	Create a new post
PATCH	/posts/:id	Update an existing post
DELETE	/posts/:id	Delete a post

# Advanced Ideas to Try
Automatically show the first post when the page loads.

Add a form to edit the post details.

Add a delete button and remove posts from the list.

Persist all changes to the db.json file using the API.

# Tech Used
HTML

CSS

JavaScript (Vanilla JS)

JSON Server



# Contributions
This is a beginner project, but feel free to fork, clone, and experiment!

# Credits
Created for learning purposes to understand DOM manipulation and working with REST APIs.

